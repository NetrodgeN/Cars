/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as AutomakersIndexImport } from './routes/automakers/index'
import { Route as AutomakersCarIdImport } from './routes/automakers/$carId'
import { Route as AutomakersCarIdEditableImport } from './routes/automakers_/$carId/editable'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AutomakersIndexRoute = AutomakersIndexImport.update({
  id: '/automakers/',
  path: '/automakers/',
  getParentRoute: () => rootRoute,
} as any)

const AutomakersCarIdRoute = AutomakersCarIdImport.update({
  id: '/automakers/$carId',
  path: '/automakers/$carId',
  getParentRoute: () => rootRoute,
} as any)

const AutomakersCarIdEditableRoute = AutomakersCarIdEditableImport.update({
  id: '/automakers_/$carId/editable',
  path: '/automakers/$carId/editable',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/automakers/$carId': {
      id: '/automakers/$carId'
      path: '/automakers/$carId'
      fullPath: '/automakers/$carId'
      preLoaderRoute: typeof AutomakersCarIdImport
      parentRoute: typeof rootRoute
    }
    '/automakers/': {
      id: '/automakers/'
      path: '/automakers'
      fullPath: '/automakers'
      preLoaderRoute: typeof AutomakersIndexImport
      parentRoute: typeof rootRoute
    }
    '/automakers_/$carId/editable': {
      id: '/automakers_/$carId/editable'
      path: '/automakers/$carId/editable'
      fullPath: '/automakers/$carId/editable'
      preLoaderRoute: typeof AutomakersCarIdEditableImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/automakers/$carId': typeof AutomakersCarIdRoute
  '/automakers': typeof AutomakersIndexRoute
  '/automakers/$carId/editable': typeof AutomakersCarIdEditableRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/automakers/$carId': typeof AutomakersCarIdRoute
  '/automakers': typeof AutomakersIndexRoute
  '/automakers/$carId/editable': typeof AutomakersCarIdEditableRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/automakers/$carId': typeof AutomakersCarIdRoute
  '/automakers/': typeof AutomakersIndexRoute
  '/automakers_/$carId/editable': typeof AutomakersCarIdEditableRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/automakers/$carId'
    | '/automakers'
    | '/automakers/$carId/editable'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/automakers/$carId'
    | '/automakers'
    | '/automakers/$carId/editable'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/automakers/$carId'
    | '/automakers/'
    | '/automakers_/$carId/editable'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutRoute: typeof AboutRoute
  AutomakersCarIdRoute: typeof AutomakersCarIdRoute
  AutomakersIndexRoute: typeof AutomakersIndexRoute
  AutomakersCarIdEditableRoute: typeof AutomakersCarIdEditableRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutRoute: AboutRoute,
  AutomakersCarIdRoute: AutomakersCarIdRoute,
  AutomakersIndexRoute: AutomakersIndexRoute,
  AutomakersCarIdEditableRoute: AutomakersCarIdEditableRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/automakers/$carId",
        "/automakers/",
        "/automakers_/$carId/editable"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/automakers/$carId": {
      "filePath": "automakers/$carId.tsx"
    },
    "/automakers/": {
      "filePath": "automakers/index.tsx"
    },
    "/automakers_/$carId/editable": {
      "filePath": "automakers_/$carId/editable.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
